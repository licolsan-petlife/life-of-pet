version: "3.0"

services:
  nginx:
    image: nginx:1.18.0-alpine
    container_name: load_balancer_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/domain:/etc/nginx/domain
      - ./nginx/cert:/etc/nginx/cert
    restart: always
    ports:
      - 80:80
      - 443:443

  airflow_redis:
    image: redis:3.2.7-alpine
    container_name: airflow_redis
    env_file:
      - ./env/airflow/redis.env
    command: redis-server --requirepass redis_secret
    restart: always

  airflow_postgres:
    image: postgres:10-alpine
    container_name: airflow_postgres
    restart: always
    env_file:
      - ./env/airflow/postgres.env
    volumes:
      - ./postgres:/var/lib/postgresql/data

  airflow_pgadmin:
    image: dpage/pgadmin4:4.21
    container_name: airflow_pgadmin
    restart: always
    depends_on:
      - airflow_postgres
    env_file:
      - ./env/airflow/pgadmin.env
    networks:
      - default
      - nginx

  airflow_webserver:
    image: airflow-base:1.10.10
    container_name: airflow_webserver
    restart: always
    depends_on:
      - airflow_postgres
      - airflow_redis
    env_file:
      - ./env/airflow/postgres.env
      - ./env/airflow/redis.env
      - ./env/airflow/airflow.env
    volumes:
      - ./airflow/dags:/usr/local/airflow/dags
      - ./jupyter/data:/dojo
    command: webserver
    healthcheck:
      test: ["CMD-SHELL", "[ -f /usr/local/airflow/airflow-webserver.pid ]"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - default
      - nginx

  airflow_flower:
    image: airflow-base:1.10.10
    container_name: airflow_flower
    restart: always
    depends_on:
      - airflow_redis
    env_file:
      - ./env/airflow/postgres.env
      - ./env/airflow/redis.env
      - ./env/airflow/airflow.env
    command: flower
    networks:
      - default
      - nginx

  airflow_scheduler:
    image: airflow-base:1.10.10
    container_name: airflow_scheduler
    restart: always
    depends_on:
      - airflow_webserver
    volumes:
      - ./airflow/dags:/usr/local/airflow/dags
    env_file:
      - ./env/airflow/postgres.env
      - ./env/airflow/redis.env
      - ./env/airflow/airflow.env
    command: scheduler

  airflow_worker:
    image: airflow-base:1.10.10
    container_name: airflow_worker
    restart: always
    depends_on:
      - airflow_scheduler
    volumes:
      - ./airflow/dags:/usr/local/airflow/dags
    env_file:
      - ./env/airflow/postgres.env
      - ./env/airflow/redis.env
      - ./env/airflow/airflow.env
    command: worker

  airflow_jupyter:
    image: jupyter/base-notebook:python-3.7.6
    container_name: airflow_jupyter
    restart: always
    volumes:
      - ./jupyter/data:/home/jovyan/work
      - ./jupyter/data:/dojo
    networks:
      - default
      - nginx

  jenkins:
    image: jenkins:2.60.3-alpine
    container_name: cicd_jenkins
    volumes:
      - ./jenkins/data:/var/jenkins_home
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:50000"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - default
      - nginx

  sonarqube:
    image: sonarqube:7.9.3-community
    container_name: cicd_sonarqube
    volumes:
      - ./sonarqube/data:/opt/sonarqube/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - default
      - nginx

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.6.2
    container_name: elk_elasticsearch
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ./elasticsearch/data:/usr/share/elasticsearch/data
    restart: always
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
    env_file:
      - ./env/elk/elasticsearch.env

  logstash:
    image: docker.elastic.co/logstash/logstash:7.6.2
    container_name: elk_logstash
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    restart: always
    ports:
      - 5000:5000
      - 5044:5044
      - 9600:9600
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    env_file:
      - ./env/elk/elasticsearch.env
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9600"]
      interval: 30s
      timeout: 30s
      retries: 3

  kibana:
    image: docker.elastic.co/kibana/kibana:7.6.2
    container_name: elk_kibana
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml
    restart: always
    env_file:
      - ./env/elk/elasticsearch.env
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - default
      - nginx

  grafana:
    image: grafana/grafana:6.7.3-ubuntu
    container_name: elk_grafana
    env_file:
      - ./env/elk/grafana.env
    networks:
      - default
      - nginx

networks:
  default:

  nginx:
    external:
      name: nginx_network
