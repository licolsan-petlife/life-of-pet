version: "3.0"

services:
  airflow_redis:
    image: redis:3.2.7-alpine
    container_name: airflow_redis
    command: redis-server --requirepass redis_secret
    restart: always

  airflow_postgres:
    image: postgres:10-alpine
    container_name: airflow_postgres
    restart: always
    environment:
      POSTGRES_DB: ${AIRFLOW_POSTGRES_DB}
      POSTGRES_USER: ${AIRFLOW_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AIRFLOW_POSTGRES_PASSWORD}
    volumes:
      - ./postgres:/var/lib/postgresql/data

  airflow_pgadmin:
    image: dpage/pgadmin4:4.21
    container_name: airflow_pgadmin
    restart: always
    depends_on:
      - airflow_postgres
    environment:
      PGADMIN_DEFAULT_EMAIL: ${AIRFLOW_PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${AIRFLOW_PGADMIN_DEFAULT_PASSWORD}
    networks:
      - default
      - nginx

  airflow_webserver:
    image: airflow-base:1.10.10
    container_name: airflow_webserver
    restart: always
    depends_on:
      - airflow_postgres
      - airflow_redis
    environment:
      LOAD_EX: ${AIRFLOW_LOAD_EX}
      FERNET_KEY: ${AIRFLOW_FERNET_KEY}
      EXECUTOR: ${AIRFLOW_EXECUTOR}
    volumes:
      - ./airflow/dags:/usr/local/airflow/dags
    command: webserver
    healthcheck:
      test: ["CMD-SHELL", "[ -f /usr/local/airflow/airflow-webserver.pid ]"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - default
      - nginx

  airflow_flower:
    image: airflow-base:1.10.10
    container_name: airflow_flower
    restart: always
    depends_on:
      - airflow_redis
    environment:
      EXECUTOR: ${AIRFLOW_EXECUTOR}
    command: flower
    networks:
      - default
      - nginx

  airflow_scheduler:
    image: airflow-base:1.10.10
    container_name: airflow_scheduler
    restart: always
    depends_on:
      - airflow_webserver
    volumes:
      - ./airflow/dags:/usr/local/airflow/dags
    environment:
      LOAD_EX: ${AIRFLOW_LOAD_EX}
      FERNET_KEY: ${AIRFLOW_FERNET_KEY}
      EXECUTOR: ${AIRFLOW_EXECUTOR}
    command: scheduler

  airflow_worker:
    image: airflow-base:1.10.10
    container_name: airflow_worker
    restart: always
    depends_on:
      - airflow_scheduler
    volumes:
      - ./airflow/dags:/usr/local/airflow/dags
    environment:
      FERNET_KEY: ${AIRFLOW_FERNET_KEY}
      EXECUTOR: ${AIRFLOW_EXECUTOR}
    command: worker

  airflow_jupyter:
    image: jupyter/base-notebook:python-3.7.6
    container_name: airflow_jupyter
    restart: always
    networks:
      - default
      - nginx

  elk_elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VERSION}
    container_name: elk_elasticsearch
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ./elasticsearch/data:/usr/share/elasticsearch/data
    restart: always
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: ${ELK_ELASTIC_PASSWORD}
      discovery.type: single-node

  elk_logstash:
    image: docker.elastic.co/logstash/logstash:${ELK_VERSION}
    container_name: elk_logstash
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    restart: always
    ports:
      - 5000:5000
      - 5044:5044
      - 9600:9600
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELK_ELASTIC_USER: ${ELK_ELASTIC_USER}
      ELK_ELASTIC_PASSWORD: ${ELK_ELASTIC_PASSWORD}
    depends_on:
      - elk_elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9600"]
      interval: 30s
      timeout: 30s
      retries: 3

  elk_kibana:
    image: docker.elastic.co/kibana/kibana:${ELK_VERSION}
    container_name: elk_kibana
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml
    restart: always
    environment:
      ELK_ELASTIC_USER: ${ELK_ELASTIC_USER}
      ELK_ELASTIC_PASSWORD: ${ELK_ELASTIC_PASSWORD}
    depends_on:
      - elk_elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - default
      - nginx

  elk_grafana:
    image: grafana/grafana:6.7.3-ubuntu
    container_name: elk_grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${ELK_GF_SECURITY_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${ELK_GF_SECURITY_ADMIN_PASSWORD}
      GF_INSTALL_PLUGINS: ${ELK_GF_INSTALL_PLUGINS}
    networks:
      - default
      - nginx

networks:
  default:

  nginx:
    external:
      name: nginx_network
